---
// src/pages/index.astro
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Will You Be My Valentine? üíù</title>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <audio id="confettiSound" src="/src/assets/confetti.wav" preload="auto"></audio>
    <audio id="musicboxSound" src="/src/assets/musicbox.wav" preload="auto"></audio>
    <style>
        /* Loading Screen Styles */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: opacity 0.5s ease-out;
        }

        .loading-heart {
            font-size: 5rem;
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .main-content {
            opacity: 0;
            transition: opacity 0.5s ease-in;
        }

        :root {
            --primary: #722a54;
            --secondary: #fd0098;
            --accent: #ff0051;
            --white: #ffffff;
        }

        body {
            margin: 0;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            font-family: 'Indie Flower', cursive;
            text-align: center;
            overflow: hidden;
            padding: 2rem;
        }

        h1 {
            color: var(--white);
            font-size: 4rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }
        h2 {
            color: var(--white);
            font-size: 4rem;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }

        .mylove-img {
            width: 200px;
            height: 200px;
            object-fit: contain;
            margin-bottom: 1rem;
        }

        .thank-you {
            color: var(--white);
            font-size: 2rem;
            margin-bottom: 2rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
        }

        .buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            position: relative;
            min-height: 100px;
            width: 100%;
            max-width: 600px;
            margin:0 auto;
        }

        button {
            padding: 1rem 2rem;
            border: none;
            border-radius: 30px;
            font-size: 1.5rem;
            font-family: inherit;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .yes-btn {
            background: var(--white);
            color: var(--primary);
        }

        .no-btn {
            background: var(--secondary);
            color: var(--white);
            transition: all 0.2s ease;
        }

        .hearts span {
            position: absolute;
            animation: float 3s infinite;
            font-size: 3rem;
            color: var(--white);
            opacity: 0.8;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(20deg); }
        }

        /* Add varying animation durations and delays */
        .hearts span:nth-child(1) { animation-delay: 0.5s; animation-duration: 6s; }
        .hearts span:nth-child(2) { animation-delay: 1.2s; animation-duration: 5.5s; }
        .hearts span:nth-child(3) { animation-delay: 2.3s; animation-duration: 7s; }
        .hearts span:nth-child(4) { animation-delay: 0.8s; animation-duration: 6.2s; }
        .hearts span:nth-child(5) { animation-delay: 1.5s; animation-duration: 5.8s; }
        .hearts span:nth-child(6) { animation-delay: 3s; animation-duration: 6.5s; }
        .hearts span:nth-child(7) { animation-delay: 2s; animation-duration: 5.2s; }
        .hearts span:nth-child(8) { animation-delay: 1.8s; animation-duration: 6.7s; }
        .hearts span:nth-child(9) { animation-delay: 0.3s; animation-duration: 5.9s; }
        .hearts span:nth-child(10) { animation-delay: 2.5s; animation-duration: 6.1s; }
        .hearts span:nth-child(11) { animation-delay: 1.7s; animation-duration: 5.4s; }
        .hearts span:nth-child(12) { animation-delay: 0.9s; animation-duration: 6.3s; }
        .hearts span:nth-child(13) { animation-delay: 2.1s; animation-duration: 5.7s; }

        .confetti {
            position: fixed;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        /* Mobile Responsiveness */
        @media screen and (max-width: 480px) {
            body {
                padding: 1rem;
            }

            h1 {
                font-size: 2.5rem;
                margin-bottom: 0.5rem;
            }

            h2 {
                font-size: 2rem;
                margin-bottom: 1rem;
            }

            .mylove-img {
                width: 150px;
                height: 150px;
            }

            .thank-you {
                font-size: 1.5rem;
                margin-bottom: 1rem;
            }

            .buttons {
                gap: 0.75rem;
                min-height: 80px;
            }

            button {
                padding: 0.75rem 1.5rem;
                font-size: 1.25rem;
                min-width: 100px;
            }

            .hearts span {
                font-size: 2rem;
            }
        }

        /* iPhone 14 Pro specific adjustments */
        @media screen and (max-width: 393px) {
            body {
                padding: 0.75rem;
            }

            h1 {
                font-size: 2.25rem;
            }

            h2 {
                font-size: 1.75rem;
            }

            .mylove-img {
                width: 120px;
                height: 120px;
            }

            .thank-you {
                font-size: 1.25rem;
            }

            button {
                padding: 0.75rem 1.25rem;
                font-size: 1.2rem;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap" rel="stylesheet">
</head>
<body>
    <div class="loading-screen" id="loadingScreen">
        <div class="loading-heart">üíù</div>
    </div>
    
    <div class="main-content" id="mainContent">
        <h1>Hi Tio üëã</h1>
        <h2>Will you be my Valentine? üíñ</h2>
        <div id="loveContent" style="display: none;">
            <img src="/src/assets/us.png" alt="mylove" class="mylove-img" />
        </div>
        <div class="hearts">
            <!-- Existing hearts -->
            <span style="left: 5%; top: 10%">üíï</span>
            <span style="right: 5%; top: 15%">üíû</span>
            <span style="left: 15%; bottom: 10%">‚ù§Ô∏èüî•</span>
            <span style="right: 20%; bottom: 25%">üß°</span>
            
            <!-- New additional emojis -->
            <span style="left: 8%; top: 80%">üíõ</span>
            <span style="right: 10%; top: 70%">üíú</span>
            <span style="left: 50%; top: 20%">üçë</span>
            <span style="right: 5%; bottom: 5%">ü•µ</span>
            <span style="left: 70%; top: 30%">üíê</span>
            <span style="right: 25%; top: 5%">üåπ</span>
            <span style="left: 5%; top: 50%">üå∫</span>
            <span style="right: 50%; bottom: 15%">üòç</span>
            <span style="left: 45%; bottom: 5%">ü•∞</span>
        </div>
        <div class="buttons">
            <button class="yes-btn" id="yesBtn">Yes</button>
            <button class="no-btn" id="noBtn">No</button>
        </div>
    </div>

    <script>
        declare const confetti: any;

        let clickCount = 0;
        
        function moveButton(button: HTMLButtonElement, intense = false): void {
            const viewportPadding = 100; // Larger padding to keep button more visible
            const centerAreaWidth = window.innerWidth * 0.6; // Use only 60% of screen width
            const centerAreaHeight = window.innerHeight * 0.6; // Use only 60% of screen height
            
            // Calculate bounds to keep button in center area
            const minX = (window.innerWidth - centerAreaWidth) / 2 + viewportPadding;
            const maxX = minX + centerAreaWidth - button.offsetWidth - (2 * viewportPadding);
            const minY = (window.innerHeight - centerAreaHeight) / 2 + viewportPadding;
            const maxY = minY + centerAreaHeight - button.offsetHeight - (2 * viewportPadding);
            
            // Generate random position within center area
            const x = Math.random() * (maxX - minX) + minX;
            const y = Math.random() * (maxY - minY) + minY;
            
            button.style.position = 'fixed';
            button.style.left = x + 'px';
            button.style.top = y + 'px';
            
            // Randomly change background color to match gradient colors
            const colors = ['#C2479D', '#EB137A'];
            const randomColor = colors[Math.floor(Math.random() * colors.length)];
            button.style.background = randomColor;
            button.style.transition = 'all 0.2s ease';
        }

        function playCelebrationSounds(): void {
            const confettiSound = document.getElementById('confettiSound') as HTMLAudioElement;
            const musicboxSound = document.getElementById('musicboxSound') as HTMLAudioElement;
            
            // Play confetti sound for the launch effect
            confettiSound.currentTime = 0;
            confettiSound.play();
            
            // Play music box sound with 2-second delay between loops
            musicboxSound.loop = false; // Disable default looping
            musicboxSound.addEventListener('ended', () => {
                setTimeout(() => {
                    musicboxSound.currentTime = 0;
                    musicboxSound.play();
                }, 2000);
            });
            
            // Start playing the music box sound
            musicboxSound.currentTime = 0;
            musicboxSound.play();
        }

        function triggerLoveConfetti(): void {
            const duration = 3 * 1000;
            const end = Date.now() + duration;

            // Play celebration sounds when confetti starts
            playCelebrationSounds();

            const frame = () => {
                const options = {
                    particleCount: 3,
                    spread: 90,
                    colors: ['#ff1a4f', '#ff6b8f', '#ff8fa3']
                };

                confetti({
                    ...options,
                    angle: 45,
                    origin: { x: 0 }
                });
                confetti({
                    ...options,
                    angle: 135,
                    origin: { x: 1 }
                });

                if (Date.now() < end) {
                    requestAnimationFrame(frame);
                }
            };
            frame();
        }

        // Set up event listeners when the DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            const yesBtn = document.getElementById('yesBtn') as HTMLButtonElement;
            const noBtn = document.getElementById('noBtn') as HTMLButtonElement;

            if (!yesBtn || !noBtn) return;

            // No button events
            noBtn.addEventListener('mouseover', () => moveButton(noBtn, true));
            noBtn.addEventListener('click', () => moveButton(noBtn, true));

            // Yes button events
            yesBtn.addEventListener('click', () => {
                clickCount++;
                
                if (clickCount === 1) {
                    yesBtn.textContent = 'Are you sure?';
                } else if (clickCount === 2) {
                    const h1 = document.querySelector('h1');
                    const h2 = document.querySelector('h2');
                    const loveContent = document.getElementById('loveContent');
                    if (h1) h1.textContent = 'Yeaaay!!';
                    if (h2) h2.textContent = 'Thank you sweetheart üíñ';
                    if (loveContent) loveContent.style.display = 'block';
                    
                    yesBtn.style.display = 'none';
                    noBtn.style.display = 'none';
                    
                    triggerLoveConfetti();
                }
            });
        });

        // Loading screen logic
        window.addEventListener('load', () => {
            const loadingScreen = document.getElementById('loadingScreen');
            const mainContent = document.getElementById('mainContent');
            const musicboxSound = document.getElementById('musicboxSound');
            const confettiSound = document.getElementById('confettiSound');
            
            // Create an array of promises for all assets
            const imagePromise = new Promise<void>((resolve) => {
                const img = new Image();
                img.src = '/src/assets/us.png';
                img.onload = resolve;
            });

            const audioPromises = [musicboxSound, confettiSound].map(audio => {
                return new Promise<void>((resolve) => {
                    if (!audio) {
                        resolve();
                        return;
                    }
                    if ((audio as HTMLAudioElement).readyState >= 4) {
                        resolve();
                    } else {
                        audio.addEventListener('canplaythrough', () => resolve());
                    }
                });
            });

            // Wait for all assets to load
            Promise.all([imagePromise, ...audioPromises]).then(() => {
                // Add a small delay for smoother transition
                setTimeout(() => {
                    if (loadingScreen && mainContent) {
                        loadingScreen.style.opacity = '0';
                        mainContent.style.opacity = '1';
                        // Remove loading screen after fade out
                        setTimeout(() => {
                            loadingScreen.style.display = 'none';
                        }, 500);
                    }
                }, 500);
            });
        });
    </script>
</body>
</html>
